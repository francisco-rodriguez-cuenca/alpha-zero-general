from __future__ import print_function
import sys
sys.path.append('..')
from Game import Game
from .AlquerqueLogic import Board
# from CatchTheHareLogic import Board
import numpy as np
from .Digits import int2base
# from Digits import int2base

"""
Game class implementation for the game of TicTacToe.
Based on the OthelloGame then getGameEnded() was adapted to new rules.

Author: Evgeny Tyurin, github.com/evg-tyurin
Date: Jan 5, 2018.

Based on the OthelloGame by Surag Nair.
"""
class AlquerqueGame(Game):
    def __init__(self, n=5):
        self.n = n

    def getInitBoard(self):
        # return initial board (numpy board)
        b = Board()
        return np.array(b.pieces)

    def getBoardSize(self):
        # (a,b) tuple
        return (self.n, self.n)

    def getActionSize(self):
        # return number of actions
        return len(self.__actions_coordinates_dict)+1

    def getNextState(self, board, player, action):
        # if player takes action on board, return next (board,player)
        # action must be a valid move
        b = Board()
        b.pieces = np.copy(board)
        move = self.__actions_coordinates_dict[action]
        b.execute_move(move, player)
        return (b.pieces, -player)

    def getValidMoves(self, board, player):
        # return a fixed size binary vector
        valids = [0]*self.getActionSize()
        b = Board()
        legalMoves =  b.get_legal_moves(player)
        if len(legalMoves)==0:
            valids[-1]=1
            return np.array(valids)
        for x1, y1, x2, y2 in legalMoves:
            valids[self.__coordinates_actions_dict[(x1, y1, x2, y2)]]=1

        return np.array(valids)

    def getGameEnded(self, board, player):
        # return 0 if not ended, 1 if player 1 won, -1 if player 1 lost
        # player = 1
        b = Board()
        b.pieces = np.copy(board)

        if b.is_win(player):
            return 1
        elif b.is_win(-player):
            return -1
        else:
            return 0

    def getCanonicalForm(self, board, player):
        # return state if player==1, else return -state if player==-1
        return player*board

    def getSymmetries(self, board, pi):
        return [(board,pi)]
        # mirror, rotational
        # assert(len(pi) == self.n**2+1)  # 1 for pass
        # pi_board = np.reshape(pi[:-1], (self.n, self.n))
        # l = []

        # for i in range(1, 5):
        #     for j in [True, False]:
        #         newB = np.rot90(board, i)
        #         newPi = np.rot90(pi_board, i)
        #         if j:
        #             newB = np.fliplr(newB)
        #             newPi = np.fliplr(newPi)
        #         l += [(newB, list(newPi.ravel()) + [pi[-1]])]
        # return l

    def stringRepresentation(self, board):
        # 8x8 numpy array (canonical board)
        return board.tostring()

    @staticmethod
    def display(board):
        n = board.shape[0]

        print("   ", end="")
        for y in range(n):
            print (y,"", end="")
        print("")
        print("  ", end="")
        for _ in range(n):
            print ("-", end="-")
        print("--")
        for y in range(n):
            print(y, "|",end="")    # print the row #
            for x in range(n):
                piece = board[y][x]    # get the piece to print
                if piece == -1: print("X ",end="")
                elif piece == 1: print("O ",end="")
                else:
                    if x==n:
                        print("-",end="")
                    else:
                        print("- ",end="")
            print("|")

        print("  ", end="")
        for _ in range(n):
            print ("-", end="-")
        print("--")

    __actions_coordinates_dict = {
        0: (0, 0, 0, 1),
        1: (0, 0, 0, 2),
        2: (0, 0, 1, 0),
        3: (0, 0, 2, 0),
        4: (0, 0, 1, 1),
        5: (0, 0, 2, 2),
        6: (0, 1, 0, 0),
        7: (0, 1, 1, 1),
        8: (0, 1, 2, 1),
        9: (0, 1, 0, 2),
        10: (0, 1, 0, 3),
        11: (0, 2, 0, 1),
        12: (0, 2, 0, 0),
        13: (0, 2, 1, 1),
        14: (0, 2, 2, 0),
        15: (0, 2, 1, 2),
        16: (0, 2, 2, 2),
        17: (0, 2, 1, 3),
        18: (0, 2, 2, 4),
        19: (0, 2, 0, 3),
        20: (0, 2, 0, 4),
        21: (0, 3, 0, 2),
        22: (0, 3, 0, 1),
        23: (0, 3, 1, 3),
        24: (0, 3, 2, 3),
        25: (0, 3, 0, 4),
        26: (0, 4, 0, 3),
        27: (0, 4, 0, 2),
        28: (0, 4, 1, 3),
        29: (0, 4, 2, 2),
        30: (0, 4, 1, 4),
        31: (0, 4, 2, 4),
        32: (1, 0, 0, 0),
        33: (1, 0, 2, 0),
        34: (1, 0, 3, 0),
        35: (1, 0, 1, 1),
        36: (1, 0, 1, 2),
        37: (1, 1, 0, 1),
        38: (1, 1, 0, 0),
        39: (1, 1, 1, 0),
        40: (1, 1, 2, 0),
        41: (1, 1, 2, 1),
        42: (1, 1, 3, 1),
        43: (1, 1, 2, 2),
        44: (1, 1, 3, 3),
        45: (1, 1, 1, 2),
        46: (1, 1, 1, 3),
        47: (1, 1, 0, 2),
        48: (1, 2, 0, 2),
        49: (1, 2, 1, 1),
        50: (1, 2, 1, 0),
        51: (1, 2, 2, 2),
        52: (1, 2, 3, 2),
        53: (1, 2, 1, 3),
        54: (1, 2, 1, 4),
        55: (1, 3, 0, 3),
        56: (1, 3, 0, 2),
        57: (1, 3, 1, 2),
        58: (1, 3, 1, 1),
        59: (1, 3, 2, 2),
        60: (1, 3, 3, 1),
        61: (1, 3, 2, 3),
        62: (1, 3, 3, 3),
        63: (1, 3, 2, 4),
        64: (1, 3, 1, 4),
        65: (1, 3, 0, 4),
        66: (1, 4, 0, 4),
        67: (1, 4, 1, 3),
        68: (1, 4, 1, 2),
        69: (1, 4, 2, 4),
        70: (1, 4, 3, 4),
        71: (2, 0, 1, 0),
        72: (2, 0, 0, 0),
        73: (2, 0, 3, 0),
        74: (2, 0, 4, 0),
        75: (2, 0, 3, 1),
        76: (2, 0, 4, 2),
        77: (2, 0, 2, 1),
        78: (2, 0, 2, 2),
        79: (2, 0, 1, 1),
        80: (2, 0, 0, 2),
        81: (2, 1, 1, 1),
        82: (2, 1, 0, 1),
        83: (2, 1, 2, 0),
        84: (2, 1, 3, 1),
        85: (2, 1, 4, 1),
        86: (2, 1, 2, 2),
        87: (2, 1, 2, 3),
        88: (2, 2, 1, 2),
        89: (2, 2, 0, 2),
        90: (2, 2, 1, 1),
        91: (2, 2, 0, 0),
        92: (2, 2, 2, 1),
        93: (2, 2, 2, 0),
        94: (2, 2, 3, 1),
        95: (2, 2, 4, 0),
        96: (2, 2, 3, 2),
        97: (2, 2, 4, 2),
        98: (2, 2, 3, 3),
        99: (2, 2, 4, 4),
        100: (2, 2, 2, 3),
        101: (2, 2, 2, 4),
        102: (2, 2, 1, 3),
        103: (2, 2, 0, 4),
        104: (2, 3, 1, 3),
        105: (2, 3, 0, 3),
        106: (2, 3, 2, 2),
        107: (2, 3, 2, 1),
        108: (2, 3, 3, 3),
        109: (2, 3, 4, 3),
        110: (2, 3, 2, 4),
        111: (2, 4, 1, 4),
        112: (2, 4, 0, 4),
        113: (2, 4, 1, 3),
        114: (2, 4, 0, 2),
        115: (2, 4, 2, 3),
        116: (2, 4, 2, 2),
        117: (2, 4, 3, 3),
        118: (2, 4, 4, 2),
        119: (2, 4, 3, 4),
        120: (2, 4, 4, 4),
        121: (3, 0, 2, 0),
        122: (3, 0, 1, 0),
        123: (3, 0, 4, 0),
        124: (3, 0, 3, 1),
        125: (3, 0, 3, 2),
        126: (3, 1, 2, 1),
        127: (3, 1, 1, 1),
        128: (3, 1, 2, 0),
        129: (3, 1, 3, 0),
        130: (3, 1, 4, 0),
        131: (3, 1, 4, 1),
        132: (3, 1, 4, 2),
        133: (3, 1, 3, 2),
        134: (3, 1, 3, 3),
        135: (3, 1, 2, 2),
        136: (3, 1, 1, 3),
        137: (3, 2, 2, 2),
        138: (3, 2, 1, 2),
        139: (3, 2, 3, 1),
        140: (3, 2, 3, 0),
        141: (3, 2, 4, 2),
        142: (3, 2, 3, 3),
        143: (3, 2, 3, 4),
        144: (3, 3, 2, 3),
        145: (3, 3, 1, 3),
        146: (3, 3, 2, 2),
        147: (3, 3, 1, 1),
        148: (3, 3, 3, 2),
        149: (3, 3, 3, 1),
        150: (3, 3, 4, 2),
        151: (3, 3, 4, 3),
        152: (3, 3, 4, 4),
        153: (3, 3, 3, 4),
        154: (3, 3, 2, 4),
        155: (3, 4, 2, 4),
        156: (3, 4, 1, 4),
        157: (3, 4, 3, 3),
        158: (3, 4, 3, 2),
        159: (3, 4, 4, 4),
        160: (4, 0, 3, 0),
        161: (4, 0, 2, 0),
        162: (4, 0, 4, 1),
        163: (4, 0, 4, 2),
        164: (4, 0, 3, 1),
        165: (4, 0, 2, 2),
        166: (4, 0, 3, 0),
        167: (4, 0, 2, 0),
        168: (4, 0, 4, 1),
        169: (4, 0, 4, 2),
        170: (4, 0, 3, 1),
        171: (4, 0, 2, 2),
        172: (4, 1, 3, 1),
        173: (4, 1, 2, 1),
        174: (4, 1, 4, 0),
        175: (4, 1, 4, 2),
        176: (4, 1, 4, 3),
        177: (4, 2, 3, 2),
        178: (4, 2, 2, 2),
        179: (4, 2, 3, 1),
        180: (4, 2, 2, 0),
        181: (4, 2, 4, 1),
        182: (4, 2, 4, 0),
        183: (4, 2, 4, 3),
        184: (4, 2, 4, 4),
        185: (4, 2, 3, 3),
        186: (4, 2, 2, 4),
        187: (4, 3, 3, 3),
        188: (4, 3, 2, 3),
        189: (4, 3, 4, 2),
        190: (4, 3, 4, 1),
        191: (4, 3, 4, 4),
        192: (4, 4, 3, 4),
        193: (4, 4, 2, 4),
        194: (4, 4, 3, 3),
        195: (4, 4, 2, 2),
        196: (4, 4, 4, 3),
        197: (4, 4, 4, 2)
    }
    __coordinates_actions_dict = {
        (0, 0, 0, 1): 0,
        (0, 0, 0, 2): 1,
        (0, 0, 1, 0): 2,
        (0, 0, 2, 0): 3,
        (0, 0, 1, 1): 4,
        (0, 0, 2, 2): 5,
        (0, 1, 0, 0): 6,
        (0, 1, 1, 1): 7,
        (0, 1, 2, 1): 8,
        (0, 1, 0, 2): 9,
        (0, 1, 0, 3): 10,
        (0, 2, 0, 1): 11,
        (0, 2, 0, 0): 12,
        (0, 2, 1, 1): 13,
        (0, 2, 2, 0): 14,
        (0, 2, 1, 2): 15,
        (0, 2, 2, 2): 16,
        (0, 2, 1, 3): 17,
        (0, 2, 2, 4): 18,
        (0, 2, 0, 3): 19,
        (0, 2, 0, 4): 20,
        (0, 3, 0, 2): 21,
        (0, 3, 0, 1): 22,
        (0, 3, 1, 3): 23,
        (0, 3, 2, 3): 24,
        (0, 3, 0, 4): 25,
        (0, 4, 0, 3): 26,
        (0, 4, 0, 2): 27,
        (0, 4, 1, 3): 28,
        (0, 4, 2, 2): 29,
        (0, 4, 1, 4): 30,
        (0, 4, 2, 4): 31,
        (1, 0, 0, 0): 32,
        (1, 0, 2, 0): 33,
        (1, 0, 3, 0): 34,
        (1, 0, 1, 1): 35,
        (1, 0, 1, 2): 36,
        (1, 1, 0, 1): 37,
        (1, 1, 0, 0): 38,
        (1, 1, 1, 0): 39,
        (1, 1, 2, 0): 40,
        (1, 1, 2, 1): 41,
        (1, 1, 3, 1): 42,
        (1, 1, 2, 2): 43,
        (1, 1, 3, 3): 44,
        (1, 1, 1, 2): 45,
        (1, 1, 1, 3): 46,
        (1, 1, 0, 2): 47,
        (1, 2, 0, 2): 48,
        (1, 2, 1, 1): 49,
        (1, 2, 1, 0): 50,
        (1, 2, 2, 2): 51,
        (1, 2, 3, 2): 52,
        (1, 2, 1, 3): 53,
        (1, 2, 1, 4): 54,
        (1, 3, 0, 3): 55,
        (1, 3, 0, 2): 56,
        (1, 3, 1, 2): 57,
        (1, 3, 1, 1): 58,
        (1, 3, 2, 2): 59,
        (1, 3, 3, 1): 60,
        (1, 3, 2, 3): 61,
        (1, 3, 3, 3): 62,
        (1, 3, 2, 4): 63,
        (1, 3, 1, 4): 64,
        (1, 3, 0, 4): 65,
        (1, 4, 0, 4): 66,
        (1, 4, 1, 3): 67,
        (1, 4, 1, 2): 68,
        (1, 4, 2, 4): 69,
        (1, 4, 3, 4): 70,
        (2, 0, 1, 0): 71,
        (2, 0, 0, 0): 72,
        (2, 0, 3, 0): 73,
        (2, 0, 4, 0): 74,
        (2, 0, 3, 1): 75,
        (2, 0, 4, 2): 76,
        (2, 0, 2, 1): 77,
        (2, 0, 2, 2): 78,
        (2, 0, 1, 1): 79,
        (2, 0, 0, 2): 80,
        (2, 1, 1, 1): 81,
        (2, 1, 0, 1): 82,
        (2, 1, 2, 0): 83,
        (2, 1, 3, 1): 84,
        (2, 1, 4, 1): 85,
        (2, 1, 2, 2): 86,
        (2, 1, 2, 3): 87,
        (2, 2, 1, 2): 88,
        (2, 2, 0, 2): 89,
        (2, 2, 1, 1): 90,
        (2, 2, 0, 0): 91,
        (2, 2, 2, 1): 92,
        (2, 2, 2, 0): 93,
        (2, 2, 3, 1): 94,
        (2, 2, 4, 0): 95,
        (2, 2, 3, 2): 96,
        (2, 2, 4, 2): 97,
        (2, 2, 3, 3): 98,
        (2, 2, 4, 4): 99,
        (2, 2, 2, 3): 100,
        (2, 2, 2, 4): 101,
        (2, 2, 1, 3): 102,
        (2, 2, 0, 4): 103,
        (2, 3, 1, 3): 104,
        (2, 3, 0, 3): 105,
        (2, 3, 2, 2): 106,
        (2, 3, 2, 1): 107,
        (2, 3, 3, 3): 108,
        (2, 3, 4, 3): 109,
        (2, 3, 2, 4): 110,
        (2, 4, 1, 4): 111,
        (2, 4, 0, 4): 112,
        (2, 4, 1, 3): 113,
        (2, 4, 0, 2): 114,
        (2, 4, 2, 3): 115,
        (2, 4, 2, 2): 116,
        (2, 4, 3, 3): 117,
        (2, 4, 4, 2): 118,
        (2, 4, 3, 4): 119,
        (2, 4, 4, 4): 120,
        (3, 0, 2, 0): 121,
        (3, 0, 1, 0): 122,
        (3, 0, 4, 0): 123,
        (3, 0, 3, 1): 124,
        (3, 0, 3, 2): 125,
        (3, 1, 2, 1): 126,
        (3, 1, 1, 1): 127,
        (3, 1, 2, 0): 128,
        (3, 1, 3, 0): 129,
        (3, 1, 4, 0): 130,
        (3, 1, 4, 1): 131,
        (3, 1, 4, 2): 132,
        (3, 1, 3, 2): 133,
        (3, 1, 3, 3): 134,
        (3, 1, 2, 2): 135,
        (3, 1, 1, 3): 136,
        (3, 2, 2, 2): 137,
        (3, 2, 1, 2): 138,
        (3, 2, 3, 1): 139,
        (3, 2, 3, 0): 140,
        (3, 2, 4, 2): 141,
        (3, 2, 3, 3): 142,
        (3, 2, 3, 4): 143,
        (3, 3, 2, 3): 144,
        (3, 3, 1, 3): 145,
        (3, 3, 2, 2): 146,
        (3, 3, 1, 1): 147,
        (3, 3, 3, 2): 148,
        (3, 3, 3, 1): 149,
        (3, 3, 4, 2): 150,
        (3, 3, 4, 3): 151,
        (3, 3, 4, 4): 152,
        (3, 3, 3, 4): 153,
        (3, 3, 2, 4): 154,
        (3, 4, 2, 4): 155,
        (3, 4, 1, 4): 156,
        (3, 4, 3, 3): 157,
        (3, 4, 3, 2): 158,
        (3, 4, 4, 4): 159,
        (4, 0, 3, 0): 166,
        (4, 0, 2, 0): 167,
        (4, 0, 4, 1): 168,
        (4, 0, 4, 2): 169,
        (4, 0, 3, 1): 170,
        (4, 0, 2, 2): 171,
        (4, 1, 3, 1): 172,
        (4, 1, 2, 1): 173,
        (4, 1, 4, 0): 174,
        (4, 1, 4, 2): 175,
        (4, 1, 4, 3): 176,
        (4, 2, 3, 2): 177,
        (4, 2, 2, 2): 178,
        (4, 2, 3, 1): 179,
        (4, 2, 2, 0): 180,
        (4, 2, 4, 1): 181,
        (4, 2, 4, 0): 182,
        (4, 2, 4, 3): 183,
        (4, 2, 4, 4): 184,
        (4, 2, 3, 3): 185,
        (4, 2, 2, 4): 186,
        (4, 3, 3, 3): 187,
        (4, 3, 2, 3): 188,
        (4, 3, 4, 2): 189,
        (4, 3, 4, 1): 190,
        (4, 3, 4, 4): 191,
        (4, 4, 3, 4): 192,
        (4, 4, 2, 4): 193,
        (4, 4, 3, 3): 194,
        (4, 4, 2, 2): 195,
        (4, 4, 4, 3): 196,
        (4, 4, 4, 2): 197
    }

if __name__ == "__main__":

    b= Board()
    
    g = AlquerqueGame()

    print(g.display(g.getInitBoard()))

    print(
        g.getValidMoves(b, 1)
    )